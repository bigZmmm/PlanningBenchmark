(define (domain hall)
  (:constants p1 p2 p3 p4)
  (:predicates (x-agent ?p) (y-agent ?p)
               (visited-A) (visited-B) (visited-C) (visited-D)
               (obsA)
               (not-obsA-q0)
               (obsA-q0-Up-q0)
               (obsA-q0-Up-q1)
               (obsA-q0-Up-q2)
               (obsA-q0-Up-q3)
               (obsA-q0-Right-q0)
               (obsA-q0-Right-q1)
               (obsA-q0-Right-q2)
               (obsA-q0-Right-q3)
               (obsA-q0-Down-q0)
               (obsA-q0-Down-q1)
               (obsA-q0-Down-q2)
               (obsA-q0-Down-q3)
               (obsA-q0-Left-q0)
               (obsA-q0-Left-q1)
               (obsA-q0-Left-q2)
               (obsA-q0-Left-q3)
               (not-obsA-q1)
               (obsA-q1-Up-q0)
               (obsA-q1-Up-q1)
               (obsA-q1-Up-q2)
               (obsA-q1-Up-q3)
               (obsA-q1-Right-q0)
               (obsA-q1-Right-q1)
               (obsA-q1-Right-q2)
               (obsA-q1-Right-q3)
               (obsA-q1-Down-q0)
               (obsA-q1-Down-q1)
               (obsA-q1-Down-q2)
               (obsA-q1-Down-q3)
               (obsA-q1-Left-q0)
               (obsA-q1-Left-q1)
               (obsA-q1-Left-q2)
               (obsA-q1-Left-q3)
               (not-obsA-q2)
               (obsA-q2-Up-q0)
               (obsA-q2-Up-q1)
               (obsA-q2-Up-q2)
               (obsA-q2-Up-q3)
               (obsA-q2-Right-q0)
               (obsA-q2-Right-q1)
               (obsA-q2-Right-q2)
               (obsA-q2-Right-q3)
               (obsA-q2-Down-q0)
               (obsA-q2-Down-q1)
               (obsA-q2-Down-q2)
               (obsA-q2-Down-q3)
               (obsA-q2-Left-q0)
               (obsA-q2-Left-q1)
               (obsA-q2-Left-q2)
               (obsA-q2-Left-q3)
               (not-obsA-q3)
               (obsA-q3-Up-q0)
               (obsA-q3-Up-q1)
               (obsA-q3-Up-q2)
               (obsA-q3-Up-q3)
               (obsA-q3-Right-q0)
               (obsA-q3-Right-q1)
               (obsA-q3-Right-q2)
               (obsA-q3-Right-q3)
               (obsA-q3-Down-q0)
               (obsA-q3-Down-q1)
               (obsA-q3-Down-q2)
               (obsA-q3-Down-q3)
               (obsA-q3-Left-q0)
               (obsA-q3-Left-q1)
               (obsA-q3-Left-q2)
               (obsA-q3-Left-q3)
               (obsB)
               (not-obsB-q0)
               (obsB-q0-Up-q0)
               (obsB-q0-Up-q1)
               (obsB-q0-Up-q2)
               (obsB-q0-Up-q3)
               (obsB-q0-Right-q0)
               (obsB-q0-Right-q1)
               (obsB-q0-Right-q2)
               (obsB-q0-Right-q3)
               (obsB-q0-Down-q0)
               (obsB-q0-Down-q1)
               (obsB-q0-Down-q2)
               (obsB-q0-Down-q3)
               (obsB-q0-Left-q0)
               (obsB-q0-Left-q1)
               (obsB-q0-Left-q2)
               (obsB-q0-Left-q3)
               (not-obsB-q1)
               (obsB-q1-Up-q0)
               (obsB-q1-Up-q1)
               (obsB-q1-Up-q2)
               (obsB-q1-Up-q3)
               (obsB-q1-Right-q0)
               (obsB-q1-Right-q1)
               (obsB-q1-Right-q2)
               (obsB-q1-Right-q3)
               (obsB-q1-Down-q0)
               (obsB-q1-Down-q1)
               (obsB-q1-Down-q2)
               (obsB-q1-Down-q3)
               (obsB-q1-Left-q0)
               (obsB-q1-Left-q1)
               (obsB-q1-Left-q2)
               (obsB-q1-Left-q3)
               (not-obsB-q2)
               (obsB-q2-Up-q0)
               (obsB-q2-Up-q1)
               (obsB-q2-Up-q2)
               (obsB-q2-Up-q3)
               (obsB-q2-Right-q0)
               (obsB-q2-Right-q1)
               (obsB-q2-Right-q2)
               (obsB-q2-Right-q3)
               (obsB-q2-Down-q0)
               (obsB-q2-Down-q1)
               (obsB-q2-Down-q2)
               (obsB-q2-Down-q3)
               (obsB-q2-Left-q0)
               (obsB-q2-Left-q1)
               (obsB-q2-Left-q2)
               (obsB-q2-Left-q3)
               (not-obsB-q3)
               (obsB-q3-Up-q0)
               (obsB-q3-Up-q1)
               (obsB-q3-Up-q2)
               (obsB-q3-Up-q3)
               (obsB-q3-Right-q0)
               (obsB-q3-Right-q1)
               (obsB-q3-Right-q2)
               (obsB-q3-Right-q3)
               (obsB-q3-Down-q0)
               (obsB-q3-Down-q1)
               (obsB-q3-Down-q2)
               (obsB-q3-Down-q3)
               (obsB-q3-Left-q0)
               (obsB-q3-Left-q1)
               (obsB-q3-Left-q2)
               (obsB-q3-Left-q3)
               (obsC)
               (not-obsC-q0)
               (obsC-q0-Up-q0)
               (obsC-q0-Up-q1)
               (obsC-q0-Up-q2)
               (obsC-q0-Up-q3)
               (obsC-q0-Right-q0)
               (obsC-q0-Right-q1)
               (obsC-q0-Right-q2)
               (obsC-q0-Right-q3)
               (obsC-q0-Down-q0)
               (obsC-q0-Down-q1)
               (obsC-q0-Down-q2)
               (obsC-q0-Down-q3)
               (obsC-q0-Left-q0)
               (obsC-q0-Left-q1)
               (obsC-q0-Left-q2)
               (obsC-q0-Left-q3)
               (not-obsC-q1)
               (obsC-q1-Up-q0)
               (obsC-q1-Up-q1)
               (obsC-q1-Up-q2)
               (obsC-q1-Up-q3)
               (obsC-q1-Right-q0)
               (obsC-q1-Right-q1)
               (obsC-q1-Right-q2)
               (obsC-q1-Right-q3)
               (obsC-q1-Down-q0)
               (obsC-q1-Down-q1)
               (obsC-q1-Down-q2)
               (obsC-q1-Down-q3)
               (obsC-q1-Left-q0)
               (obsC-q1-Left-q1)
               (obsC-q1-Left-q2)
               (obsC-q1-Left-q3)
               (not-obsC-q2)
               (obsC-q2-Up-q0)
               (obsC-q2-Up-q1)
               (obsC-q2-Up-q2)
               (obsC-q2-Up-q3)
               (obsC-q2-Right-q0)
               (obsC-q2-Right-q1)
               (obsC-q2-Right-q2)
               (obsC-q2-Right-q3)
               (obsC-q2-Down-q0)
               (obsC-q2-Down-q1)
               (obsC-q2-Down-q2)
               (obsC-q2-Down-q3)
               (obsC-q2-Left-q0)
               (obsC-q2-Left-q1)
               (obsC-q2-Left-q2)
               (obsC-q2-Left-q3)
               (not-obsC-q3)
               (obsC-q3-Up-q0)
               (obsC-q3-Up-q1)
               (obsC-q3-Up-q2)
               (obsC-q3-Up-q3)
               (obsC-q3-Right-q0)
               (obsC-q3-Right-q1)
               (obsC-q3-Right-q2)
               (obsC-q3-Right-q3)
               (obsC-q3-Down-q0)
               (obsC-q3-Down-q1)
               (obsC-q3-Down-q2)
               (obsC-q3-Down-q3)
               (obsC-q3-Left-q0)
               (obsC-q3-Left-q1)
               (obsC-q3-Left-q2)
               (obsC-q3-Left-q3)
               (obsD)
               (not-obsD-q0)
               (obsD-q0-Up-q0)
               (obsD-q0-Up-q1)
               (obsD-q0-Up-q2)
               (obsD-q0-Up-q3)
               (obsD-q0-Right-q0)
               (obsD-q0-Right-q1)
               (obsD-q0-Right-q2)
               (obsD-q0-Right-q3)
               (obsD-q0-Down-q0)
               (obsD-q0-Down-q1)
               (obsD-q0-Down-q2)
               (obsD-q0-Down-q3)
               (obsD-q0-Left-q0)
               (obsD-q0-Left-q1)
               (obsD-q0-Left-q2)
               (obsD-q0-Left-q3)
               (not-obsD-q1)
               (obsD-q1-Up-q0)
               (obsD-q1-Up-q1)
               (obsD-q1-Up-q2)
               (obsD-q1-Up-q3)
               (obsD-q1-Right-q0)
               (obsD-q1-Right-q1)
               (obsD-q1-Right-q2)
               (obsD-q1-Right-q3)
               (obsD-q1-Down-q0)
               (obsD-q1-Down-q1)
               (obsD-q1-Down-q2)
               (obsD-q1-Down-q3)
               (obsD-q1-Left-q0)
               (obsD-q1-Left-q1)
               (obsD-q1-Left-q2)
               (obsD-q1-Left-q3)
               (not-obsD-q2)
               (obsD-q2-Up-q0)
               (obsD-q2-Up-q1)
               (obsD-q2-Up-q2)
               (obsD-q2-Up-q3)
               (obsD-q2-Right-q0)
               (obsD-q2-Right-q1)
               (obsD-q2-Right-q2)
               (obsD-q2-Right-q3)
               (obsD-q2-Down-q0)
               (obsD-q2-Down-q1)
               (obsD-q2-Down-q2)
               (obsD-q2-Down-q3)
               (obsD-q2-Left-q0)
               (obsD-q2-Left-q1)
               (obsD-q2-Left-q2)
               (obsD-q2-Left-q3)
               (not-obsD-q3)
               (obsD-q3-Up-q0)
               (obsD-q3-Up-q1)
               (obsD-q3-Up-q2)
               (obsD-q3-Up-q3)
               (obsD-q3-Right-q0)
               (obsD-q3-Right-q1)
               (obsD-q3-Right-q2)
               (obsD-q3-Right-q3)
               (obsD-q3-Down-q0)
               (obsD-q3-Down-q1)
               (obsD-q3-Down-q2)
               (obsD-q3-Down-q3)
               (obsD-q3-Left-q0)
               (obsD-q3-Left-q1)
               (obsD-q3-Left-q2)
               (obsD-q3-Left-q3)
               (obs-)
               (not-obs--q0)
               (obs--q0-Up-q0)
               (obs--q0-Up-q1)
               (obs--q0-Up-q2)
               (obs--q0-Up-q3)
               (obs--q0-Right-q0)
               (obs--q0-Right-q1)
               (obs--q0-Right-q2)
               (obs--q0-Right-q3)
               (obs--q0-Down-q0)
               (obs--q0-Down-q1)
               (obs--q0-Down-q2)
               (obs--q0-Down-q3)
               (obs--q0-Left-q0)
               (obs--q0-Left-q1)
               (obs--q0-Left-q2)
               (obs--q0-Left-q3)
               (not-obs--q1)
               (obs--q1-Up-q0)
               (obs--q1-Up-q1)
               (obs--q1-Up-q2)
               (obs--q1-Up-q3)
               (obs--q1-Right-q0)
               (obs--q1-Right-q1)
               (obs--q1-Right-q2)
               (obs--q1-Right-q3)
               (obs--q1-Down-q0)
               (obs--q1-Down-q1)
               (obs--q1-Down-q2)
               (obs--q1-Down-q3)
               (obs--q1-Left-q0)
               (obs--q1-Left-q1)
               (obs--q1-Left-q2)
               (obs--q1-Left-q3)
               (not-obs--q2)
               (obs--q2-Up-q0)
               (obs--q2-Up-q1)
               (obs--q2-Up-q2)
               (obs--q2-Up-q3)
               (obs--q2-Right-q0)
               (obs--q2-Right-q1)
               (obs--q2-Right-q2)
               (obs--q2-Right-q3)
               (obs--q2-Down-q0)
               (obs--q2-Down-q1)
               (obs--q2-Down-q2)
               (obs--q2-Down-q3)
               (obs--q2-Left-q0)
               (obs--q2-Left-q1)
               (obs--q2-Left-q2)
               (obs--q2-Left-q3)
               (not-obs--q3)
               (obs--q3-Up-q0)
               (obs--q3-Up-q1)
               (obs--q3-Up-q2)
               (obs--q3-Up-q3)
               (obs--q3-Right-q0)
               (obs--q3-Right-q1)
               (obs--q3-Right-q2)
               (obs--q3-Right-q3)
               (obs--q3-Down-q0)
               (obs--q3-Down-q1)
               (obs--q3-Down-q2)
               (obs--q3-Down-q3)
               (obs--q3-Left-q0)
               (obs--q3-Left-q1)
               (obs--q3-Left-q2)
               (obs--q3-Left-q3)
               (q0)
               (q1)
               (q2)
               (q3)
  )
  (:action map-C-q0-Up-q0 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Up-q0)) )
  (:action app-C-q0-Up-q0
    :precondition (obsC-q0-Up-q0)
    :effect (and (when (and (obsC) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)))) ))
  (:action map-C-q0-Up-q1 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Up-q1)) )
  (:action app-C-q0-Up-q1
    :precondition (obsC-q0-Up-q1)
    :effect (and (when (and (obsC) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q0)) (q1))) ))
  (:action map-C-q0-Up-q2 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Up-q2)) )
  (:action app-C-q0-Up-q2
    :precondition (obsC-q0-Up-q2)
    :effect (and (when (and (obsC) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q0)) (q2))) ))
  (:action map-C-q0-Up-q3 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Up-q3)) )
  (:action app-C-q0-Up-q3
    :precondition (obsC-q0-Up-q3)
    :effect (and (when (and (obsC) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q0)) (q3))) ))
  (:action map-C-q1-Up-q0 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Up-q0)) )
  (:action app-C-q1-Up-q0
    :precondition (obsC-q1-Up-q0)
    :effect (and (when (and (obsC) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q1)) (q0))) ))
  (:action map-C-q1-Up-q1 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Up-q1)) )
  (:action app-C-q1-Up-q1
    :precondition (obsC-q1-Up-q1)
    :effect (and (when (and (obsC) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)))) ))
  (:action map-C-q1-Up-q2 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Up-q2)) )
  (:action app-C-q1-Up-q2
    :precondition (obsC-q1-Up-q2)
    :effect (and (when (and (obsC) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q1)) (q2))) ))
  (:action map-C-q1-Up-q3 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Up-q3)) )
  (:action app-C-q1-Up-q3
    :precondition (obsC-q1-Up-q3)
    :effect (and (when (and (obsC) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q1)) (q3))) ))
  (:action map-C-q2-Up-q0 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Up-q0)) )
  (:action app-C-q2-Up-q0
    :precondition (obsC-q2-Up-q0)
    :effect (and (when (and (obsC) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q2)) (q0))) ))
  (:action map-C-q2-Up-q1 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Up-q1)) )
  (:action app-C-q2-Up-q1
    :precondition (obsC-q2-Up-q1)
    :effect (and (when (and (obsC) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q2)) (q1))) ))
  (:action map-C-q2-Up-q2 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Up-q2)) )
  (:action app-C-q2-Up-q2
    :precondition (obsC-q2-Up-q2)
    :effect (and (when (and (obsC) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)))) ))
  (:action map-C-q2-Up-q3 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Up-q3)) )
  (:action app-C-q2-Up-q3
    :precondition (obsC-q2-Up-q3)
    :effect (and (when (and (obsC) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q2)) (q3))) ))
  (:action map-C-q3-Up-q0 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Up-q0)) )
  (:action app-C-q3-Up-q0
    :precondition (obsC-q3-Up-q0)
    :effect (and (when (and (obsC) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q3)) (q0))) ))
  (:action map-C-q3-Up-q1 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Up-q1)) )
  (:action app-C-q3-Up-q1
    :precondition (obsC-q3-Up-q1)
    :effect (and (when (and (obsC) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q3)) (q1))) ))
  (:action map-C-q3-Up-q2 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Up-q2)) )
  (:action app-C-q3-Up-q2
    :precondition (obsC-q3-Up-q2)
    :effect (and (when (and (obsC) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)) (not (q3)) (q2))) ))
  (:action map-C-q3-Up-q3 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Up-q3)) )
  (:action app-C-q3-Up-q3
    :precondition (obsC-q3-Up-q3)
    :effect (and (when (and (obsC) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsC)))) ))
  (:action map-D-q0-Up-q0 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Up-q0)) )
  (:action app-D-q0-Up-q0
    :precondition (obsD-q0-Up-q0)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)))) ))
  (:action map-D-q0-Up-q1 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Up-q1)) )
  (:action app-D-q0-Up-q1
    :precondition (obsD-q0-Up-q1)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q0)) (q1))) ))
  (:action map-D-q0-Up-q2 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Up-q2)) )
  (:action app-D-q0-Up-q2
    :precondition (obsD-q0-Up-q2)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q0)) (q2))) ))
  (:action map-D-q0-Up-q3 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Up-q3)) )
  (:action app-D-q0-Up-q3
    :precondition (obsD-q0-Up-q3)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q0)) (q3))) ))
  (:action map-D-q1-Up-q0 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Up-q0)) )
  (:action app-D-q1-Up-q0
    :precondition (obsD-q1-Up-q0)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q1)) (q0))) ))
  (:action map-D-q1-Up-q1 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Up-q1)) )
  (:action app-D-q1-Up-q1
    :precondition (obsD-q1-Up-q1)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)))) ))
  (:action map-D-q1-Up-q2 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Up-q2)) )
  (:action app-D-q1-Up-q2
    :precondition (obsD-q1-Up-q2)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q1)) (q2))) ))
  (:action map-D-q1-Up-q3 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Up-q3)) )
  (:action app-D-q1-Up-q3
    :precondition (obsD-q1-Up-q3)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q1)) (q3))) ))
  (:action map-D-q2-Up-q0 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Up-q0)) )
  (:action app-D-q2-Up-q0
    :precondition (obsD-q2-Up-q0)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q2)) (q0))) ))
  (:action map-D-q2-Up-q1 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Up-q1)) )
  (:action app-D-q2-Up-q1
    :precondition (obsD-q2-Up-q1)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q2)) (q1))) ))
  (:action map-D-q2-Up-q2 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Up-q2)) )
  (:action app-D-q2-Up-q2
    :precondition (obsD-q2-Up-q2)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)))) ))
  (:action map-D-q2-Up-q3 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Up-q3)) )
  (:action app-D-q2-Up-q3
    :precondition (obsD-q2-Up-q3)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q2)) (q3))) ))
  (:action map-D-q3-Up-q0 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Up-q0)) )
  (:action app-D-q3-Up-q0
    :precondition (obsD-q3-Up-q0)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q3)) (q0))) ))
  (:action map-D-q3-Up-q1 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Up-q1)) )
  (:action app-D-q3-Up-q1
    :precondition (obsD-q3-Up-q1)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q3)) (q1))) ))
  (:action map-D-q3-Up-q2 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Up-q2)) )
  (:action app-D-q3-Up-q2
    :precondition (obsD-q3-Up-q2)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)) (not (q3)) (q2))) ))
  (:action map-D-q3-Up-q3 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Up-q3)) )
  (:action app-D-q3-Up-q3
    :precondition (obsD-q3-Up-q3)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obsD)))) ))
  (:action map---q0-Up-q0 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Up-q0)) )
  (:action app---q0-Up-q0
    :precondition (obs--q0-Up-q0)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)))) ))
  (:action map---q0-Up-q1 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Up-q1)) )
  (:action app---q0-Up-q1
    :precondition (obs--q0-Up-q1)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q0)) (q1))) ))
  (:action map---q0-Up-q2 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Up-q2)) )
  (:action app---q0-Up-q2
    :precondition (obs--q0-Up-q2)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q0)) (q2))) ))
  (:action map---q0-Up-q3 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Up-q3)) )
  (:action app---q0-Up-q3
    :precondition (obs--q0-Up-q3)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q0)) (q3))) ))
  (:action map---q1-Up-q0 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Up-q0)) )
  (:action app---q1-Up-q0
    :precondition (obs--q1-Up-q0)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q1)) (q0))) ))
  (:action map---q1-Up-q1 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Up-q1)) )
  (:action app---q1-Up-q1
    :precondition (obs--q1-Up-q1)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)))) ))
  (:action map---q1-Up-q2 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Up-q2)) )
  (:action app---q1-Up-q2
    :precondition (obs--q1-Up-q2)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q1)) (q2))) ))
  (:action map---q1-Up-q3 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Up-q3)) )
  (:action app---q1-Up-q3
    :precondition (obs--q1-Up-q3)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q1)) (q3))) ))
  (:action map---q2-Up-q0 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Up-q0)) )
  (:action app---q2-Up-q0
    :precondition (obs--q2-Up-q0)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q2)) (q0))) ))
  (:action map---q2-Up-q1 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Up-q1)) )
  (:action app---q2-Up-q1
    :precondition (obs--q2-Up-q1)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q2)) (q1))) ))
  (:action map---q2-Up-q2 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Up-q2)) )
  (:action app---q2-Up-q2
    :precondition (obs--q2-Up-q2)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)))) ))
  (:action map---q2-Up-q3 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Up-q3)) )
  (:action app---q2-Up-q3
    :precondition (obs--q2-Up-q3)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q2)) (q3))) ))
  (:action map---q3-Up-q0 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Up-q0)) )
  (:action app---q3-Up-q0
    :precondition (obs--q3-Up-q0)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q3)) (q0))) ))
  (:action map---q3-Up-q1 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Up-q1)) )
  (:action app---q3-Up-q1
    :precondition (obs--q3-Up-q1)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q3)) (q1))) ))
  (:action map---q3-Up-q2 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Up-q2)) )
  (:action app---q3-Up-q2
    :precondition (obs--q3-Up-q2)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)) (not (q3)) (q2))) ))
  (:action map---q3-Up-q3 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Up-q3)) )
  (:action app---q3-Up-q3
    :precondition (obs--q3-Up-q3)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p1) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p2) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (y-agent p3) (not (y-agent p4)) (not (obs-)))) ))
  (:action map-A-q0-Right-q0 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Right-q0)) )
  (:action app-A-q0-Right-q0
    :precondition (obsA-q0-Right-q0)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)))) ))
  (:action map-A-q0-Right-q1 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Right-q1)) )
  (:action app-A-q0-Right-q1
    :precondition (obsA-q0-Right-q1)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q0)) (q1))) ))
  (:action map-A-q0-Right-q2 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Right-q2)) )
  (:action app-A-q0-Right-q2
    :precondition (obsA-q0-Right-q2)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q0)) (q2))) ))
  (:action map-A-q0-Right-q3 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Right-q3)) )
  (:action app-A-q0-Right-q3
    :precondition (obsA-q0-Right-q3)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q0)) (q3))) ))
  (:action map-A-q1-Right-q0 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Right-q0)) )
  (:action app-A-q1-Right-q0
    :precondition (obsA-q1-Right-q0)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q1)) (q0))) ))
  (:action map-A-q1-Right-q1 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Right-q1)) )
  (:action app-A-q1-Right-q1
    :precondition (obsA-q1-Right-q1)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)))) ))
  (:action map-A-q1-Right-q2 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Right-q2)) )
  (:action app-A-q1-Right-q2
    :precondition (obsA-q1-Right-q2)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q1)) (q2))) ))
  (:action map-A-q1-Right-q3 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Right-q3)) )
  (:action app-A-q1-Right-q3
    :precondition (obsA-q1-Right-q3)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q1)) (q3))) ))
  (:action map-A-q2-Right-q0 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Right-q0)) )
  (:action app-A-q2-Right-q0
    :precondition (obsA-q2-Right-q0)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q2)) (q0))) ))
  (:action map-A-q2-Right-q1 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Right-q1)) )
  (:action app-A-q2-Right-q1
    :precondition (obsA-q2-Right-q1)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q2)) (q1))) ))
  (:action map-A-q2-Right-q2 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Right-q2)) )
  (:action app-A-q2-Right-q2
    :precondition (obsA-q2-Right-q2)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)))) ))
  (:action map-A-q2-Right-q3 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Right-q3)) )
  (:action app-A-q2-Right-q3
    :precondition (obsA-q2-Right-q3)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q2)) (q3))) ))
  (:action map-A-q3-Right-q0 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Right-q0)) )
  (:action app-A-q3-Right-q0
    :precondition (obsA-q3-Right-q0)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q3)) (q0))) ))
  (:action map-A-q3-Right-q1 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Right-q1)) )
  (:action app-A-q3-Right-q1
    :precondition (obsA-q3-Right-q1)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q3)) (q1))) ))
  (:action map-A-q3-Right-q2 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Right-q2)) )
  (:action app-A-q3-Right-q2
    :precondition (obsA-q3-Right-q2)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)) (not (q3)) (q2))) ))
  (:action map-A-q3-Right-q3 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Right-q3)) )
  (:action app-A-q3-Right-q3
    :precondition (obsA-q3-Right-q3)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsA)))) ))
  (:action map-D-q0-Right-q0 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Right-q0)) )
  (:action app-D-q0-Right-q0
    :precondition (obsD-q0-Right-q0)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD))))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)))) ))
  (:action map-D-q0-Right-q1 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Right-q1)) )
  (:action app-D-q0-Right-q1
    :precondition (obsD-q0-Right-q1)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q0)) (q1)))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q0)) (q1))) ))
  (:action map-D-q0-Right-q2 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Right-q2)) )
  (:action app-D-q0-Right-q2
    :precondition (obsD-q0-Right-q2)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q0)) (q2)))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q0)) (q2))) ))
  (:action map-D-q0-Right-q3 :precondition (not-obsD-q0) :effect (and (not (not-obsD-q0)) (obsD-q0-Right-q3)) )
  (:action app-D-q0-Right-q3
    :precondition (obsD-q0-Right-q3)
    :effect (and (when (and (obsD) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q0)) (q3)))
                 (when (and (obsD) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q0)) (q3))) ))
  (:action map-D-q1-Right-q0 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Right-q0)) )
  (:action app-D-q1-Right-q0
    :precondition (obsD-q1-Right-q0)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q1)) (q0)))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q1)) (q0))) ))
  (:action map-D-q1-Right-q1 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Right-q1)) )
  (:action app-D-q1-Right-q1
    :precondition (obsD-q1-Right-q1)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD))))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)))) ))
  (:action map-D-q1-Right-q2 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Right-q2)) )
  (:action app-D-q1-Right-q2
    :precondition (obsD-q1-Right-q2)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q1)) (q2)))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q1)) (q2))) ))
  (:action map-D-q1-Right-q3 :precondition (not-obsD-q1) :effect (and (not (not-obsD-q1)) (obsD-q1-Right-q3)) )
  (:action app-D-q1-Right-q3
    :precondition (obsD-q1-Right-q3)
    :effect (and (when (and (obsD) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q1)) (q3)))
                 (when (and (obsD) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q1)) (q3))) ))
  (:action map-D-q2-Right-q0 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Right-q0)) )
  (:action app-D-q2-Right-q0
    :precondition (obsD-q2-Right-q0)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q2)) (q0)))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q2)) (q0))) ))
  (:action map-D-q2-Right-q1 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Right-q1)) )
  (:action app-D-q2-Right-q1
    :precondition (obsD-q2-Right-q1)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q2)) (q1)))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q2)) (q1))) ))
  (:action map-D-q2-Right-q2 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Right-q2)) )
  (:action app-D-q2-Right-q2
    :precondition (obsD-q2-Right-q2)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD))))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)))) ))
  (:action map-D-q2-Right-q3 :precondition (not-obsD-q2) :effect (and (not (not-obsD-q2)) (obsD-q2-Right-q3)) )
  (:action app-D-q2-Right-q3
    :precondition (obsD-q2-Right-q3)
    :effect (and (when (and (obsD) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q2)) (q3)))
                 (when (and (obsD) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q2)) (q3))) ))
  (:action map-D-q3-Right-q0 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Right-q0)) )
  (:action app-D-q3-Right-q0
    :precondition (obsD-q3-Right-q0)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q3)) (q0)))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q3)) (q0))) ))
  (:action map-D-q3-Right-q1 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Right-q1)) )
  (:action app-D-q3-Right-q1
    :precondition (obsD-q3-Right-q1)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q3)) (q1)))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q3)) (q1))) ))
  (:action map-D-q3-Right-q2 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Right-q2)) )
  (:action app-D-q3-Right-q2
    :precondition (obsD-q3-Right-q2)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q3)) (q2)))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)) (not (q3)) (q2))) ))
  (:action map-D-q3-Right-q3 :precondition (not-obsD-q3) :effect (and (not (not-obsD-q3)) (obsD-q3-Right-q3)) )
  (:action app-D-q3-Right-q3
    :precondition (obsD-q3-Right-q3)
    :effect (and (when (and (obsD) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obsD))))
                 (when (and (obsD) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obsD)))) ))
  (:action map---q0-Right-q0 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Right-q0)) )
  (:action app---q0-Right-q0
    :precondition (obs--q0-Right-q0)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)))) ))
  (:action map---q0-Right-q1 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Right-q1)) )
  (:action app---q0-Right-q1
    :precondition (obs--q0-Right-q1)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q0)) (q1))) ))
  (:action map---q0-Right-q2 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Right-q2)) )
  (:action app---q0-Right-q2
    :precondition (obs--q0-Right-q2)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q0)) (q2))) ))
  (:action map---q0-Right-q3 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Right-q3)) )
  (:action app---q0-Right-q3
    :precondition (obs--q0-Right-q3)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q0)) (q3))) ))
  (:action map---q1-Right-q0 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Right-q0)) )
  (:action app---q1-Right-q0
    :precondition (obs--q1-Right-q0)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q1)) (q0))) ))
  (:action map---q1-Right-q1 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Right-q1)) )
  (:action app---q1-Right-q1
    :precondition (obs--q1-Right-q1)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)))) ))
  (:action map---q1-Right-q2 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Right-q2)) )
  (:action app---q1-Right-q2
    :precondition (obs--q1-Right-q2)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q1)) (q2))) ))
  (:action map---q1-Right-q3 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Right-q3)) )
  (:action app---q1-Right-q3
    :precondition (obs--q1-Right-q3)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q1)) (q3))) ))
  (:action map---q2-Right-q0 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Right-q0)) )
  (:action app---q2-Right-q0
    :precondition (obs--q2-Right-q0)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q2)) (q0))) ))
  (:action map---q2-Right-q1 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Right-q1)) )
  (:action app---q2-Right-q1
    :precondition (obs--q2-Right-q1)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q2)) (q1))) ))
  (:action map---q2-Right-q2 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Right-q2)) )
  (:action app---q2-Right-q2
    :precondition (obs--q2-Right-q2)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)))) ))
  (:action map---q2-Right-q3 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Right-q3)) )
  (:action app---q2-Right-q3
    :precondition (obs--q2-Right-q3)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q2)) (q3))) ))
  (:action map---q3-Right-q0 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Right-q0)) )
  (:action app---q3-Right-q0
    :precondition (obs--q3-Right-q0)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q3)) (q0))) ))
  (:action map---q3-Right-q1 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Right-q1)) )
  (:action app---q3-Right-q1
    :precondition (obs--q3-Right-q1)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q3)) (q1))) ))
  (:action map---q3-Right-q2 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Right-q2)) )
  (:action app---q3-Right-q2
    :precondition (obs--q3-Right-q2)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)) (not (q3)) (q2))) ))
  (:action map---q3-Right-q3 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Right-q3)) )
  (:action app---q3-Right-q3
    :precondition (obs--q3-Right-q3)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p4)) (and (x-agent p2) (not (x-agent p1)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p3) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p3) (not (x-agent p2)) (not (obs-)))) ))
  (:action map-A-q0-Down-q0 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Down-q0)) )
  (:action app-A-q0-Down-q0
    :precondition (obsA-q0-Down-q0)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA))))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)))) ))
  (:action map-A-q0-Down-q1 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Down-q1)) )
  (:action app-A-q0-Down-q1
    :precondition (obsA-q0-Down-q1)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q0)) (q1)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q0)) (q1))) ))
  (:action map-A-q0-Down-q2 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Down-q2)) )
  (:action app-A-q0-Down-q2
    :precondition (obsA-q0-Down-q2)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q0)) (q2)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q0)) (q2))) ))
  (:action map-A-q0-Down-q3 :precondition (not-obsA-q0) :effect (and (not (not-obsA-q0)) (obsA-q0-Down-q3)) )
  (:action app-A-q0-Down-q3
    :precondition (obsA-q0-Down-q3)
    :effect (and (when (and (obsA) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q0)) (q3)))
                 (when (and (obsA) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q0)) (q3))) ))
  (:action map-A-q1-Down-q0 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Down-q0)) )
  (:action app-A-q1-Down-q0
    :precondition (obsA-q1-Down-q0)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q1)) (q0)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q1)) (q0))) ))
  (:action map-A-q1-Down-q1 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Down-q1)) )
  (:action app-A-q1-Down-q1
    :precondition (obsA-q1-Down-q1)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA))))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)))) ))
  (:action map-A-q1-Down-q2 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Down-q2)) )
  (:action app-A-q1-Down-q2
    :precondition (obsA-q1-Down-q2)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q1)) (q2)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q1)) (q2))) ))
  (:action map-A-q1-Down-q3 :precondition (not-obsA-q1) :effect (and (not (not-obsA-q1)) (obsA-q1-Down-q3)) )
  (:action app-A-q1-Down-q3
    :precondition (obsA-q1-Down-q3)
    :effect (and (when (and (obsA) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q1)) (q3)))
                 (when (and (obsA) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q1)) (q3))) ))
  (:action map-A-q2-Down-q0 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Down-q0)) )
  (:action app-A-q2-Down-q0
    :precondition (obsA-q2-Down-q0)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q2)) (q0)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q2)) (q0))) ))
  (:action map-A-q2-Down-q1 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Down-q1)) )
  (:action app-A-q2-Down-q1
    :precondition (obsA-q2-Down-q1)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q2)) (q1)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q2)) (q1))) ))
  (:action map-A-q2-Down-q2 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Down-q2)) )
  (:action app-A-q2-Down-q2
    :precondition (obsA-q2-Down-q2)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA))))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)))) ))
  (:action map-A-q2-Down-q3 :precondition (not-obsA-q2) :effect (and (not (not-obsA-q2)) (obsA-q2-Down-q3)) )
  (:action app-A-q2-Down-q3
    :precondition (obsA-q2-Down-q3)
    :effect (and (when (and (obsA) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q2)) (q3)))
                 (when (and (obsA) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q2)) (q3))) ))
  (:action map-A-q3-Down-q0 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Down-q0)) )
  (:action app-A-q3-Down-q0
    :precondition (obsA-q3-Down-q0)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q3)) (q0)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q3)) (q0))) ))
  (:action map-A-q3-Down-q1 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Down-q1)) )
  (:action app-A-q3-Down-q1
    :precondition (obsA-q3-Down-q1)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q3)) (q1)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q3)) (q1))) ))
  (:action map-A-q3-Down-q2 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Down-q2)) )
  (:action app-A-q3-Down-q2
    :precondition (obsA-q3-Down-q2)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q3)) (q2)))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)) (not (q3)) (q2))) ))
  (:action map-A-q3-Down-q3 :precondition (not-obsA-q3) :effect (and (not (not-obsA-q3)) (obsA-q3-Down-q3)) )
  (:action app-A-q3-Down-q3
    :precondition (obsA-q3-Down-q3)
    :effect (and (when (and (obsA) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA))))
                 (when (and (obsA) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsA)))) ))
  (:action map-B-q0-Down-q0 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Down-q0)) )
  (:action app-B-q0-Down-q0
    :precondition (obsB-q0-Down-q0)
    :effect (and (when (and (obsB) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)))) ))
  (:action map-B-q0-Down-q1 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Down-q1)) )
  (:action app-B-q0-Down-q1
    :precondition (obsB-q0-Down-q1)
    :effect (and (when (and (obsB) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q0)) (q1))) ))
  (:action map-B-q0-Down-q2 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Down-q2)) )
  (:action app-B-q0-Down-q2
    :precondition (obsB-q0-Down-q2)
    :effect (and (when (and (obsB) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q0)) (q2))) ))
  (:action map-B-q0-Down-q3 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Down-q3)) )
  (:action app-B-q0-Down-q3
    :precondition (obsB-q0-Down-q3)
    :effect (and (when (and (obsB) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q0)) (q3))) ))
  (:action map-B-q1-Down-q0 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Down-q0)) )
  (:action app-B-q1-Down-q0
    :precondition (obsB-q1-Down-q0)
    :effect (and (when (and (obsB) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q1)) (q0))) ))
  (:action map-B-q1-Down-q1 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Down-q1)) )
  (:action app-B-q1-Down-q1
    :precondition (obsB-q1-Down-q1)
    :effect (and (when (and (obsB) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)))) ))
  (:action map-B-q1-Down-q2 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Down-q2)) )
  (:action app-B-q1-Down-q2
    :precondition (obsB-q1-Down-q2)
    :effect (and (when (and (obsB) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q1)) (q2))) ))
  (:action map-B-q1-Down-q3 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Down-q3)) )
  (:action app-B-q1-Down-q3
    :precondition (obsB-q1-Down-q3)
    :effect (and (when (and (obsB) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q1)) (q3))) ))
  (:action map-B-q2-Down-q0 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Down-q0)) )
  (:action app-B-q2-Down-q0
    :precondition (obsB-q2-Down-q0)
    :effect (and (when (and (obsB) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q2)) (q0))) ))
  (:action map-B-q2-Down-q1 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Down-q1)) )
  (:action app-B-q2-Down-q1
    :precondition (obsB-q2-Down-q1)
    :effect (and (when (and (obsB) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q2)) (q1))) ))
  (:action map-B-q2-Down-q2 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Down-q2)) )
  (:action app-B-q2-Down-q2
    :precondition (obsB-q2-Down-q2)
    :effect (and (when (and (obsB) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)))) ))
  (:action map-B-q2-Down-q3 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Down-q3)) )
  (:action app-B-q2-Down-q3
    :precondition (obsB-q2-Down-q3)
    :effect (and (when (and (obsB) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q2)) (q3))) ))
  (:action map-B-q3-Down-q0 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Down-q0)) )
  (:action app-B-q3-Down-q0
    :precondition (obsB-q3-Down-q0)
    :effect (and (when (and (obsB) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q3)) (q0))) ))
  (:action map-B-q3-Down-q1 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Down-q1)) )
  (:action app-B-q3-Down-q1
    :precondition (obsB-q3-Down-q1)
    :effect (and (when (and (obsB) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q3)) (q1))) ))
  (:action map-B-q3-Down-q2 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Down-q2)) )
  (:action app-B-q3-Down-q2
    :precondition (obsB-q3-Down-q2)
    :effect (and (when (and (obsB) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)) (not (q3)) (q2))) ))
  (:action map-B-q3-Down-q3 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Down-q3)) )
  (:action app-B-q3-Down-q3
    :precondition (obsB-q3-Down-q3)
    :effect (and (when (and (obsB) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obsB)))) ))
  (:action map---q0-Down-q0 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Down-q0)) )
  (:action app---q0-Down-q0
    :precondition (obs--q0-Down-q0)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)))) ))
  (:action map---q0-Down-q1 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Down-q1)) )
  (:action app---q0-Down-q1
    :precondition (obs--q0-Down-q1)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q0)) (q1))) ))
  (:action map---q0-Down-q2 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Down-q2)) )
  (:action app---q0-Down-q2
    :precondition (obs--q0-Down-q2)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q0)) (q2))) ))
  (:action map---q0-Down-q3 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Down-q3)) )
  (:action app---q0-Down-q3
    :precondition (obs--q0-Down-q3)
    :effect (and (when (and (obs-) (q0) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q0)) (q3))) ))
  (:action map---q1-Down-q0 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Down-q0)) )
  (:action app---q1-Down-q0
    :precondition (obs--q1-Down-q0)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q1)) (q0))) ))
  (:action map---q1-Down-q1 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Down-q1)) )
  (:action app---q1-Down-q1
    :precondition (obs--q1-Down-q1)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)))) ))
  (:action map---q1-Down-q2 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Down-q2)) )
  (:action app---q1-Down-q2
    :precondition (obs--q1-Down-q2)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q1)) (q2))) ))
  (:action map---q1-Down-q3 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Down-q3)) )
  (:action app---q1-Down-q3
    :precondition (obs--q1-Down-q3)
    :effect (and (when (and (obs-) (q1) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q1)) (q3))) ))
  (:action map---q2-Down-q0 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Down-q0)) )
  (:action app---q2-Down-q0
    :precondition (obs--q2-Down-q0)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q2)) (q0))) ))
  (:action map---q2-Down-q1 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Down-q1)) )
  (:action app---q2-Down-q1
    :precondition (obs--q2-Down-q1)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q2)) (q1))) ))
  (:action map---q2-Down-q2 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Down-q2)) )
  (:action app---q2-Down-q2
    :precondition (obs--q2-Down-q2)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)))) ))
  (:action map---q2-Down-q3 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Down-q3)) )
  (:action app---q2-Down-q3
    :precondition (obs--q2-Down-q3)
    :effect (and (when (and (obs-) (q2) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q2)) (q3))) ))
  (:action map---q3-Down-q0 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Down-q0)) )
  (:action app---q3-Down-q0
    :precondition (obs--q3-Down-q0)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q3)) (q0))) ))
  (:action map---q3-Down-q1 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Down-q1)) )
  (:action app---q3-Down-q1
    :precondition (obs--q3-Down-q1)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q3)) (q1))) ))
  (:action map---q3-Down-q2 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Down-q2)) )
  (:action app---q3-Down-q2
    :precondition (obs--q3-Down-q2)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)) (not (q3)) (q2))) ))
  (:action map---q3-Down-q3 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Down-q3)) )
  (:action app---q3-Down-q3
    :precondition (obs--q3-Down-q3)
    :effect (and (when (and (obs-) (q3) (x-agent p1) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (y-agent p2) (not (y-agent p1)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p2)) (and (y-agent p3) (not (y-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p1) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p3)) (and (y-agent p4) (not (y-agent p3)) (not (obs-)))) ))
  (:action map-B-q0-Left-q0 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Left-q0)) )
  (:action app-B-q0-Left-q0
    :precondition (obsB-q0-Left-q0)
    :effect (and (when (and (obsB) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB))))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)))) ))
  (:action map-B-q0-Left-q1 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Left-q1)) )
  (:action app-B-q0-Left-q1
    :precondition (obsB-q0-Left-q1)
    :effect (and (when (and (obsB) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q0)) (q1)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q0)) (q1))) ))
  (:action map-B-q0-Left-q2 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Left-q2)) )
  (:action app-B-q0-Left-q2
    :precondition (obsB-q0-Left-q2)
    :effect (and (when (and (obsB) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q0)) (q2)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q0)) (q2))) ))
  (:action map-B-q0-Left-q3 :precondition (not-obsB-q0) :effect (and (not (not-obsB-q0)) (obsB-q0-Left-q3)) )
  (:action app-B-q0-Left-q3
    :precondition (obsB-q0-Left-q3)
    :effect (and (when (and (obsB) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q0)) (q3)))
                 (when (and (obsB) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q0)) (q3))) ))
  (:action map-B-q1-Left-q0 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Left-q0)) )
  (:action app-B-q1-Left-q0
    :precondition (obsB-q1-Left-q0)
    :effect (and (when (and (obsB) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q1)) (q0)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q1)) (q0))) ))
  (:action map-B-q1-Left-q1 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Left-q1)) )
  (:action app-B-q1-Left-q1
    :precondition (obsB-q1-Left-q1)
    :effect (and (when (and (obsB) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB))))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)))) ))
  (:action map-B-q1-Left-q2 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Left-q2)) )
  (:action app-B-q1-Left-q2
    :precondition (obsB-q1-Left-q2)
    :effect (and (when (and (obsB) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q1)) (q2)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q1)) (q2))) ))
  (:action map-B-q1-Left-q3 :precondition (not-obsB-q1) :effect (and (not (not-obsB-q1)) (obsB-q1-Left-q3)) )
  (:action app-B-q1-Left-q3
    :precondition (obsB-q1-Left-q3)
    :effect (and (when (and (obsB) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q1)) (q3)))
                 (when (and (obsB) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q1)) (q3))) ))
  (:action map-B-q2-Left-q0 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Left-q0)) )
  (:action app-B-q2-Left-q0
    :precondition (obsB-q2-Left-q0)
    :effect (and (when (and (obsB) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q2)) (q0)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q2)) (q0))) ))
  (:action map-B-q2-Left-q1 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Left-q1)) )
  (:action app-B-q2-Left-q1
    :precondition (obsB-q2-Left-q1)
    :effect (and (when (and (obsB) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q2)) (q1)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q2)) (q1))) ))
  (:action map-B-q2-Left-q2 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Left-q2)) )
  (:action app-B-q2-Left-q2
    :precondition (obsB-q2-Left-q2)
    :effect (and (when (and (obsB) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB))))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)))) ))
  (:action map-B-q2-Left-q3 :precondition (not-obsB-q2) :effect (and (not (not-obsB-q2)) (obsB-q2-Left-q3)) )
  (:action app-B-q2-Left-q3
    :precondition (obsB-q2-Left-q3)
    :effect (and (when (and (obsB) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q2)) (q3)))
                 (when (and (obsB) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q2)) (q3))) ))
  (:action map-B-q3-Left-q0 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Left-q0)) )
  (:action app-B-q3-Left-q0
    :precondition (obsB-q3-Left-q0)
    :effect (and (when (and (obsB) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q3)) (q0)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q3)) (q0))) ))
  (:action map-B-q3-Left-q1 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Left-q1)) )
  (:action app-B-q3-Left-q1
    :precondition (obsB-q3-Left-q1)
    :effect (and (when (and (obsB) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q3)) (q1)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q3)) (q1))) ))
  (:action map-B-q3-Left-q2 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Left-q2)) )
  (:action app-B-q3-Left-q2
    :precondition (obsB-q3-Left-q2)
    :effect (and (when (and (obsB) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q3)) (q2)))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)) (not (q3)) (q2))) ))
  (:action map-B-q3-Left-q3 :precondition (not-obsB-q3) :effect (and (not (not-obsB-q3)) (obsB-q3-Left-q3)) )
  (:action app-B-q3-Left-q3
    :precondition (obsB-q3-Left-q3)
    :effect (and (when (and (obsB) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsB))))
                 (when (and (obsB) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsB)))) ))
  (:action map-C-q0-Left-q0 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Left-q0)) )
  (:action app-C-q0-Left-q0
    :precondition (obsC-q0-Left-q0)
    :effect (and (when (and (obsC) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC))))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)))) ))
  (:action map-C-q0-Left-q1 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Left-q1)) )
  (:action app-C-q0-Left-q1
    :precondition (obsC-q0-Left-q1)
    :effect (and (when (and (obsC) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q0)) (q1)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q0)) (q1))) ))
  (:action map-C-q0-Left-q2 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Left-q2)) )
  (:action app-C-q0-Left-q2
    :precondition (obsC-q0-Left-q2)
    :effect (and (when (and (obsC) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q0)) (q2)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q0)) (q2))) ))
  (:action map-C-q0-Left-q3 :precondition (not-obsC-q0) :effect (and (not (not-obsC-q0)) (obsC-q0-Left-q3)) )
  (:action app-C-q0-Left-q3
    :precondition (obsC-q0-Left-q3)
    :effect (and (when (and (obsC) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q0)) (q3)))
                 (when (and (obsC) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q0)) (q3))) ))
  (:action map-C-q1-Left-q0 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Left-q0)) )
  (:action app-C-q1-Left-q0
    :precondition (obsC-q1-Left-q0)
    :effect (and (when (and (obsC) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q1)) (q0)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q1)) (q0))) ))
  (:action map-C-q1-Left-q1 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Left-q1)) )
  (:action app-C-q1-Left-q1
    :precondition (obsC-q1-Left-q1)
    :effect (and (when (and (obsC) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC))))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)))) ))
  (:action map-C-q1-Left-q2 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Left-q2)) )
  (:action app-C-q1-Left-q2
    :precondition (obsC-q1-Left-q2)
    :effect (and (when (and (obsC) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q1)) (q2)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q1)) (q2))) ))
  (:action map-C-q1-Left-q3 :precondition (not-obsC-q1) :effect (and (not (not-obsC-q1)) (obsC-q1-Left-q3)) )
  (:action app-C-q1-Left-q3
    :precondition (obsC-q1-Left-q3)
    :effect (and (when (and (obsC) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q1)) (q3)))
                 (when (and (obsC) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q1)) (q3))) ))
  (:action map-C-q2-Left-q0 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Left-q0)) )
  (:action app-C-q2-Left-q0
    :precondition (obsC-q2-Left-q0)
    :effect (and (when (and (obsC) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q2)) (q0)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q2)) (q0))) ))
  (:action map-C-q2-Left-q1 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Left-q1)) )
  (:action app-C-q2-Left-q1
    :precondition (obsC-q2-Left-q1)
    :effect (and (when (and (obsC) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q2)) (q1)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q2)) (q1))) ))
  (:action map-C-q2-Left-q2 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Left-q2)) )
  (:action app-C-q2-Left-q2
    :precondition (obsC-q2-Left-q2)
    :effect (and (when (and (obsC) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC))))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)))) ))
  (:action map-C-q2-Left-q3 :precondition (not-obsC-q2) :effect (and (not (not-obsC-q2)) (obsC-q2-Left-q3)) )
  (:action app-C-q2-Left-q3
    :precondition (obsC-q2-Left-q3)
    :effect (and (when (and (obsC) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q2)) (q3)))
                 (when (and (obsC) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q2)) (q3))) ))
  (:action map-C-q3-Left-q0 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Left-q0)) )
  (:action app-C-q3-Left-q0
    :precondition (obsC-q3-Left-q0)
    :effect (and (when (and (obsC) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q3)) (q0)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q3)) (q0))) ))
  (:action map-C-q3-Left-q1 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Left-q1)) )
  (:action app-C-q3-Left-q1
    :precondition (obsC-q3-Left-q1)
    :effect (and (when (and (obsC) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q3)) (q1)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q3)) (q1))) ))
  (:action map-C-q3-Left-q2 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Left-q2)) )
  (:action app-C-q3-Left-q2
    :precondition (obsC-q3-Left-q2)
    :effect (and (when (and (obsC) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q3)) (q2)))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)) (not (q3)) (q2))) ))
  (:action map-C-q3-Left-q3 :precondition (not-obsC-q3) :effect (and (not (not-obsC-q3)) (obsC-q3-Left-q3)) )
  (:action app-C-q3-Left-q3
    :precondition (obsC-q3-Left-q3)
    :effect (and (when (and (obsC) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obsC))))
                 (when (and (obsC) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obsC)))) ))
  (:action map---q0-Left-q0 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Left-q0)) )
  (:action app---q0-Left-q0
    :precondition (obs--q0-Left-q0)
    :effect (and (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-))))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)))) ))
  (:action map---q0-Left-q1 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Left-q1)) )
  (:action app---q0-Left-q1
    :precondition (obs--q0-Left-q1)
    :effect (and (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q0)) (q1)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q0)) (q1))) ))
  (:action map---q0-Left-q2 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Left-q2)) )
  (:action app---q0-Left-q2
    :precondition (obs--q0-Left-q2)
    :effect (and (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q0)) (q2)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q0)) (q2))) ))
  (:action map---q0-Left-q3 :precondition (not-obs--q0) :effect (and (not (not-obs--q0)) (obs--q0-Left-q3)) )
  (:action app---q0-Left-q3
    :precondition (obs--q0-Left-q3)
    :effect (and (when (and (obs-) (q0) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q0)) (q3)))
                 (when (and (obs-) (q0) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q0)) (q3))) ))
  (:action map---q1-Left-q0 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Left-q0)) )
  (:action app---q1-Left-q0
    :precondition (obs--q1-Left-q0)
    :effect (and (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q1)) (q0)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q1)) (q0))) ))
  (:action map---q1-Left-q1 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Left-q1)) )
  (:action app---q1-Left-q1
    :precondition (obs--q1-Left-q1)
    :effect (and (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-))))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)))) ))
  (:action map---q1-Left-q2 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Left-q2)) )
  (:action app---q1-Left-q2
    :precondition (obs--q1-Left-q2)
    :effect (and (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q1)) (q2)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q1)) (q2))) ))
  (:action map---q1-Left-q3 :precondition (not-obs--q1) :effect (and (not (not-obs--q1)) (obs--q1-Left-q3)) )
  (:action app---q1-Left-q3
    :precondition (obs--q1-Left-q3)
    :effect (and (when (and (obs-) (q1) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q1)) (q3)))
                 (when (and (obs-) (q1) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q1)) (q3))) ))
  (:action map---q2-Left-q0 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Left-q0)) )
  (:action app---q2-Left-q0
    :precondition (obs--q2-Left-q0)
    :effect (and (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q2)) (q0)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q2)) (q0))) ))
  (:action map---q2-Left-q1 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Left-q1)) )
  (:action app---q2-Left-q1
    :precondition (obs--q2-Left-q1)
    :effect (and (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q2)) (q1)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q2)) (q1))) ))
  (:action map---q2-Left-q2 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Left-q2)) )
  (:action app---q2-Left-q2
    :precondition (obs--q2-Left-q2)
    :effect (and (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-))))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)))) ))
  (:action map---q2-Left-q3 :precondition (not-obs--q2) :effect (and (not (not-obs--q2)) (obs--q2-Left-q3)) )
  (:action app---q2-Left-q3
    :precondition (obs--q2-Left-q3)
    :effect (and (when (and (obs-) (q2) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q2)) (q3)))
                 (when (and (obs-) (q2) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q2)) (q3))) ))
  (:action map---q3-Left-q0 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Left-q0)) )
  (:action app---q3-Left-q0
    :precondition (obs--q3-Left-q0)
    :effect (and (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q3)) (q0)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q3)) (q0))) ))
  (:action map---q3-Left-q1 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Left-q1)) )
  (:action app---q3-Left-q1
    :precondition (obs--q3-Left-q1)
    :effect (and (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q3)) (q1)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q3)) (q1))) ))
  (:action map---q3-Left-q2 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Left-q2)) )
  (:action app---q3-Left-q2
    :precondition (obs--q3-Left-q2)
    :effect (and (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q3)) (q2)))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)) (not (q3)) (q2))) ))
  (:action map---q3-Left-q3 :precondition (not-obs--q3) :effect (and (not (not-obs--q3)) (obs--q3-Left-q3)) )
  (:action app---q3-Left-q3
    :precondition (obs--q3-Left-q3)
    :effect (and (when (and (obs-) (q3) (x-agent p2) (y-agent p1)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p2) (y-agent p4)) (and (x-agent p1) (not (x-agent p2)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p1)) (and (x-agent p2) (not (x-agent p3)) (not (obs-))))
                 (when (and (obs-) (q3) (x-agent p3) (y-agent p4)) (and (x-agent p2) (not (x-agent p3)) (not (obs-)))) ))
  (:action zoom
    :effect (and (when (and (x-agent p1) (y-agent p1)) (obsA))
                 (when (and (x-agent p1) (y-agent p2)) (obs-))
                 (when (and (x-agent p1) (y-agent p3)) (obs-))
                 (when (and (x-agent p1) (y-agent p4)) (obsD))
                 (when (and (x-agent p2) (y-agent p1)) (obs-))
                 (when (and (x-agent p2) (y-agent p4)) (obs-))
                 (when (and (x-agent p3) (y-agent p1)) (obsB))
                 (when (and (x-agent p3) (y-agent p2)) (obs-))
                 (when (and (x-agent p3) (y-agent p3)) (obs-))
                 (when (and (x-agent p3) (y-agent p4)) (obsC))
                 (when (and (x-agent p1) (y-agent p1)) (visited-A))
                 (when (and (x-agent p3) (y-agent p1)) (visited-B))
                 (when (and (x-agent p3) (y-agent p4)) (visited-C))
                 (when (and (x-agent p1) (y-agent p4)) (visited-D)) ))
)
